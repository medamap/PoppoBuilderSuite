/**
 * Error Code Definitions
 * Centralized error code constants for PoppoBuilder Suite
 */

/**
 * Error code categories and their ranges:
 * 1000-1999: System/Configuration errors
 * 2000-2999: GitHub API errors  
 * 3000-3999: Claude API errors
 * 4000-4999: Task/Queue errors
 * 5000-5999: Agent errors
 * 6000-6999: File/IO errors
 * 7000-7999: Process errors
 * 8000-8999: Database/State errors
 * 9000-9999: Network/Communication errors
 */

const ERROR_CODES = {
  // System/Configuration Errors (1000-1999)
  SYSTEM_INITIALIZATION_FAILED: 'E1001',
  CONFIG_FILE_NOT_FOUND: 'E1002',
  CONFIG_INVALID_FORMAT: 'E1003',
  CONFIG_VALIDATION_FAILED: 'E1004',
  I18N_INITIALIZATION_FAILED: 'E1005',
  LOGGER_INITIALIZATION_FAILED: 'E1006',
  ENVIRONMENT_VARIABLE_MISSING: 'E1007',
  DEPENDENCY_MISSING: 'E1008',
  PERMISSION_DENIED: 'E1009',
  DISK_SPACE_INSUFFICIENT: 'E1010',
  MEMORY_LIMIT_EXCEEDED: 'E1011',
  SYSTEM_RESOURCE_UNAVAILABLE: 'E1012',

  // GitHub API Errors (2000-2999)
  GITHUB_AUTH_FAILED: 'E2001',
  GITHUB_TOKEN_INVALID: 'E2002',
  GITHUB_TOKEN_EXPIRED: 'E2003',
  GITHUB_RATE_LIMIT_EXCEEDED: 'E2004',
  GITHUB_API_UNAVAILABLE: 'E2005',
  GITHUB_REPOSITORY_NOT_FOUND: 'E2006',
  GITHUB_ISSUE_NOT_FOUND: 'E2007',
  GITHUB_PERMISSION_DENIED: 'E2008',
  GITHUB_NETWORK_ERROR: 'E2009',
  GITHUB_WEBHOOK_ERROR: 'E2010',
  GITHUB_COMMENT_FAILED: 'E2011',
  GITHUB_LABEL_OPERATION_FAILED: 'E2012',

  // Claude API Errors (3000-3999)  
  CLAUDE_AUTH_FAILED: 'E3001',
  CLAUDE_API_KEY_INVALID: 'E3002',
  CLAUDE_SESSION_EXPIRED: 'E3003',
  CLAUDE_RATE_LIMIT_EXCEEDED: 'E3004',
  CLAUDE_API_UNAVAILABLE: 'E3005',
  CLAUDE_REQUEST_TIMEOUT: 'E3006',
  CLAUDE_CONTEXT_LIMIT_EXCEEDED: 'E3007',
  CLAUDE_MODEL_UNAVAILABLE: 'E3008',
  CLAUDE_CONTENT_FILTERED: 'E3009',
  CLAUDE_NETWORK_ERROR: 'E3010',
  CLAUDE_RESPONSE_INVALID: 'E3011',
  CLAUDE_EXECUTION_FAILED: 'E3012',

  // Task/Queue Errors (4000-4999)
  TASK_CREATION_FAILED: 'E4001',
  TASK_EXECUTION_FAILED: 'E4002',
  TASK_TIMEOUT: 'E4003',
  TASK_CANCELLED: 'E4004',
  TASK_INVALID_PARAMETERS: 'E4005',
  QUEUE_FULL: 'E4006',
  QUEUE_INITIALIZATION_FAILED: 'E4007',
  PRIORITY_QUEUE_ERROR: 'E4008',
  TASK_DEPENDENCY_FAILED: 'E4009',
  TASK_RETRY_EXHAUSTED: 'E4010',
  TASK_SERIALIZATION_FAILED: 'E4011',
  CONCURRENT_LIMIT_EXCEEDED: 'E4012',

  // Agent Errors (5000-5999)
  AGENT_INITIALIZATION_FAILED: 'E5001',
  AGENT_STARTUP_FAILED: 'E5002',
  AGENT_SHUTDOWN_FAILED: 'E5003',
  AGENT_COMMUNICATION_FAILED: 'E5004',
  AGENT_HEALTH_CHECK_FAILED: 'E5005',
  AGENT_CONFIGURATION_INVALID: 'E5006',
  AGENT_RESOURCE_EXHAUSTED: 'E5007',
  AGENT_TASK_ASSIGNMENT_FAILED: 'E5008',
  AGENT_HEARTBEAT_TIMEOUT: 'E5009',
  AGENT_CRASH_DETECTED: 'E5010',
  AGENT_SCALING_FAILED: 'E5011',
  AGENT_COORDINATION_FAILED: 'E5012',

  // File/IO Errors (6000-6999)
  FILE_NOT_FOUND: 'E6001',
  FILE_READ_FAILED: 'E6002',
  FILE_WRITE_FAILED: 'E6003',
  FILE_PERMISSION_DENIED: 'E6004',
  DIRECTORY_CREATION_FAILED: 'E6005',
  FILE_CORRUPTION_DETECTED: 'E6006',
  BACKUP_CREATION_FAILED: 'E6007',
  BACKUP_RESTORATION_FAILED: 'E6008',
  LOG_ROTATION_FAILED: 'E6009',
  ARCHIVE_OPERATION_FAILED: 'E6010',
  FILE_LOCK_FAILED: 'E6011',
  STORAGE_QUOTA_EXCEEDED: 'E6012',

  // Process Errors (7000-7999)
  PROCESS_SPAWN_FAILED: 'E7001',
  PROCESS_EXECUTION_FAILED: 'E7002',
  PROCESS_TIMEOUT: 'E7003',
  PROCESS_KILLED: 'E7004',
  PROCESS_COMMUNICATION_FAILED: 'E7005',
  PROCESS_RESOURCE_LIMIT: 'E7006',
  PROCESS_CRASH_DETECTED: 'E7007',
  PROCESS_MONITORING_FAILED: 'E7008',
  PROCESS_RECOVERY_FAILED: 'E7009',
  PROCESS_CLEANUP_FAILED: 'E7010',
  SIGNAL_HANDLING_FAILED: 'E7011',
  CHILD_PROCESS_ERROR: 'E7012',

  // Database/State Errors (8000-8999)
  DATABASE_CONNECTION_FAILED: 'E8001',
  DATABASE_QUERY_FAILED: 'E8002',
  DATABASE_TRANSACTION_FAILED: 'E8003',
  DATABASE_SCHEMA_ERROR: 'E8004',
  STATE_SERIALIZATION_FAILED: 'E8005',
  STATE_DESERIALIZATION_FAILED: 'E8006',
  STATE_CORRUPTION_DETECTED: 'E8007',
  STATE_MIGRATION_FAILED: 'E8008',
  CACHE_OPERATION_FAILED: 'E8009',
  LOCK_ACQUISITION_FAILED: 'E8010',
  DATA_VALIDATION_FAILED: 'E8011',
  CONCURRENT_MODIFICATION: 'E8012',

  // Network/Communication Errors (9000-9999)
  NETWORK_CONNECTION_FAILED: 'E9001',
  NETWORK_TIMEOUT: 'E9002',
  DNS_RESOLUTION_FAILED: 'E9003',
  SSL_CERTIFICATE_ERROR: 'E9004',
  PROXY_CONFIGURATION_ERROR: 'E9005',
  WEBSOCKET_CONNECTION_FAILED: 'E9006',
  MESSAGE_QUEUE_ERROR: 'E9007',
  REDIS_CONNECTION_FAILED: 'E9008',
  API_ENDPOINT_UNAVAILABLE: 'E9009',
  PROTOCOL_ERROR: 'E9010',
  BANDWIDTH_LIMIT_EXCEEDED: 'E9011',
  COMMUNICATION_SECURITY_ERROR: 'E9012'
};

/**
 * Error severity levels
 */
const ERROR_SEVERITY = {
  CRITICAL: 'critical',    // System-breaking errors
  HIGH: 'high',           // Major functionality impacted
  MEDIUM: 'medium',       // Moderate impact
  LOW: 'low',             // Minor issues
  INFO: 'info'            // Informational
};

/**
 * Error categories for grouping and handling
 */
const ERROR_CATEGORIES = {
  SYSTEM: 'system',
  GITHUB: 'github', 
  CLAUDE: 'claude',
  TASK: 'task',
  AGENT: 'agent',
  FILE: 'file',
  PROCESS: 'process',
  DATABASE: 'database',
  NETWORK: 'network'
};

/**
 * Error code metadata mapping
 */
const ERROR_METADATA = {
  [ERROR_CODES.SYSTEM_INITIALIZATION_FAILED]: {
    category: ERROR_CATEGORIES.SYSTEM,
    severity: ERROR_SEVERITY.CRITICAL,
    recoverable: false,
    retryable: false
  },
  [ERROR_CODES.CONFIG_FILE_NOT_FOUND]: {
    category: ERROR_CATEGORIES.SYSTEM,
    severity: ERROR_SEVERITY.HIGH,
    recoverable: true,
    retryable: false
  },
  [ERROR_CODES.GITHUB_RATE_LIMIT_EXCEEDED]: {
    category: ERROR_CATEGORIES.GITHUB,
    severity: ERROR_SEVERITY.MEDIUM,
    recoverable: true,
    retryable: true
  },
  [ERROR_CODES.CLAUDE_SESSION_EXPIRED]: {
    category: ERROR_CATEGORIES.CLAUDE,
    severity: ERROR_SEVERITY.HIGH,
    recoverable: true,
    retryable: true
  },
  [ERROR_CODES.TASK_TIMEOUT]: {
    category: ERROR_CATEGORIES.TASK,
    severity: ERROR_SEVERITY.MEDIUM,
    recoverable: true,
    retryable: true
  },
  // Add more metadata as needed
};

/**
 * Get error metadata by code
 */
function getErrorMetadata(code) {
  return ERROR_METADATA[code] || {
    category: ERROR_CATEGORIES.SYSTEM,
    severity: ERROR_SEVERITY.MEDIUM,
    recoverable: false,
    retryable: false
  };
}

/**
 * Check if error is retryable
 */
function isRetryableError(code) {
  return getErrorMetadata(code).retryable;
}

/**
 * Check if error is recoverable
 */
function isRecoverableError(code) {
  return getErrorMetadata(code).recoverable;
}

/**
 * Get error category
 */
function getErrorCategory(code) {
  return getErrorMetadata(code).category;
}

/**
 * Get error severity
 */
function getErrorSeverity(code) {
  return getErrorMetadata(code).severity;
}

module.exports = {
  ERROR_CODES,
  ERROR_SEVERITY,
  ERROR_CATEGORIES,
  ERROR_METADATA,
  getErrorMetadata,
  isRetryableError,
  isRecoverableError,
  getErrorCategory,
  getErrorSeverity
};