[
  {
    "type": "issue",
    "issue": {
      "author": {
        "id": "MDQ6VXNlcjE1NjY0OTk1",
        "is_bot": false,
        "login": "medamap",
        "name": "Medamap"
      },
      "body": "## 概要\nPoppoBuilder Suiteのエージェント間通信を改善するため、メッセージキューシステムを導入します。これにより、より堅牢でスケーラブルなアーキテクチャを実現します。\n\n## 背景\n現在のエージェント間通信は直接的なプロセス間通信に依存していますが、以下の課題があります：\n- エージェントの密結合\n- 障害の連鎖的な影響\n- スケーリングの困難さ\n- メッセージの欠損リスク\n\n## Phase 2 実装内容\n1. **メッセージキューの選定と導入**\n   - Redis Pub/Sub または RabbitMQ の評価\n   - 軽量で高速な実装を優先\n   - Dockerコンテナでの提供\n\n2. **非同期メッセージング基盤**\n   - メッセージのシリアライズ/デシリアライズ\n   - 配信保証レベルの設定（at-least-once）\n   - デッドレターキューの実装\n\n3. **イベントドリブン化**\n   - Issue処理完了イベント\n   - エラー発生イベント\n   - エージェント起動/停止イベント\n   - カスタムイベントの定義\n\n4. **既存コードの段階的移行**\n   - 互換性レイヤーの実装\n   - 移行ガイドラインの作成\n   - フォールバック機構\n\n## アーキテクチャ設計\n\n\n## 実装詳細\n1. **メッセージフォーマット**\n   - JSON形式の標準化\n   - スキーマバリデーション\n   - バージョニング対応\n\n2. **接続管理**\n   - 自動再接続\n   - コネクションプーリング\n   - ヘルスチェック\n\n3. **監視とログ**\n   - メッセージ流量の監視\n   - レイテンシ測定\n   - エラー率の追跡\n\n## メリット\n- エージェントの疎結合化\n- 障害の局所化\n- 水平スケーリングの容易化\n- メッセージの永続化オプション\n\n## 移行計画\n1. 開発環境での検証\n2. 一部エージェントでの試験運用\n3. 段階的な本番環境への適用\n4. 旧方式の廃止\n\n## 優先度\n低〜中 - 将来的なスケーラビリティのため\n\n#dogfooding #architecture #scalability",
      "createdAt": "2025-06-18T00:18:58Z",
      "labels": [
        {
          "id": "LA_kwDOO7m6fc8AAAACC8UZPg",
          "name": "task:dogfooding",
          "description": "PoppoBuilder自己改善タスク（CLAUDE.md参照・更新必須）",
          "color": "ff6b35"
        }
      ],
      "number": 83,
      "title": "エージェント分離アーキテクチャ Phase 2 - メッセージキュー導入",
      "updatedAt": "2025-06-19T12:55:27Z"
    },
    "issueNumber": 83,
    "labels": [
      "task:dogfooding"
    ],
    "id": "task-1750340815065-g0csxksto",
    "priority": 100,
    "enqueuedAt": 1750340815065,
    "attempts": 0
  },
  {
    "type": "issue",
    "issue": {
      "author": {
        "id": "MDQ6VXNlcjE1NjY0OTk1",
        "is_bot": false,
        "login": "medamap",
        "name": "Medamap"
      },
      "body": "## 概要\nPoppoBuilder Suiteに新しいエージェント「CCTA（Code Change Test Agent）」を実装します。このエージェントは、自動テスト実行、カバレッジレポート生成、パフォーマンス検証を行います。\n\n## 背景\n設計書（implementation-plan.md Phase 3）で計画されているCCTAエージェントは、テストの自動化と品質保証を目的としています。\n\n## 実装内容\n1. **CCTAエージェントの基本構造**\n   - agents/ccta/ ディレクトリの作成\n   - index.jsでメインロジックの実装\n   - PRやコミット時のトリガー実行\n\n2. **主要機能の実装**\n   - 単体テストの自動実行\n   - 統合テストの実行\n   - カバレッジレポートの生成\n   - パフォーマンステストの実行\n   - テスト結果のサマリー作成\n\n3. **テストフレームワークとの統合**\n   - Jest/Mocha/その他のテストランナー対応\n   - カバレッジツールとの連携\n   - パフォーマンス測定ツールの統合\n\n4. **レポート機能**\n   - テスト結果のGitHubコメント\n   - カバレッジバッジの更新\n   - パフォーマンストレンドの追跡\n   - 失敗したテストの詳細レポート\n\n## 期待される効果\n- テスト実行の自動化\n- カバレッジの可視化と向上\n- パフォーマンス退行の早期発見\n- 品質の継続的な改善\n\n## 参考資料\n- 設計書: docs/design/implementation-plan.md Phase 3\n- 関連エージェント: CCRA（コードレビュー）\n\n## タスクの規模\n大規模（8-10時間程度の実装）\n\n#task:dogfooding",
      "createdAt": "2025-06-18T03:18:05Z",
      "labels": [
        {
          "id": "LA_kwDOO7m6fc8AAAACC24Eyw",
          "name": "enhancement",
          "description": "New feature or request",
          "color": "a2eeef"
        },
        {
          "id": "LA_kwDOO7m6fc8AAAACC8UZPg",
          "name": "task:dogfooding",
          "description": "PoppoBuilder自己改善タスク（CLAUDE.md参照・更新必須）",
          "color": "ff6b35"
        }
      ],
      "number": 90,
      "title": "CCTA (Code Change Test Agent) の実装",
      "updatedAt": "2025-06-19T12:19:59Z"
    },
    "issueNumber": 90,
    "labels": [
      "enhancement",
      "task:dogfooding"
    ],
    "id": "task-1750340815065-1556dq6zy",
    "priority": 100,
    "enqueuedAt": 1750340815065,
    "attempts": 0
  },
  {
    "type": "issue",
    "issue": {
      "author": {
        "id": "MDQ6VXNlcjE1NjY0OTk1",
        "is_bot": false,
        "login": "medamap",
        "name": "Medamap"
      },
      "body": "## 概要\nプロセス管理ダッシュボードにWebSocketを使用したリアルタイム更新機能を完全実装します。現在、サーバー側は実装済みですが、クライアント側の実装が不完全です。\n\n## 背景\n現在のダッシュボードは手動更新またはポーリングに依存しており、リアルタイムでの状態変化を反映できません。WebSocketによるリアルタイム通信により、より良いユーザー体験を提供できます。\n\n## 実装内容\n1. **クライアント側のWebSocket実装**\n   - dashboard/client/js/app.js のTODOコメント部分の実装\n   - WebSocket接続の確立と管理\n   - 自動再接続機能\n   - エラーハンドリング\n\n2. **リアルタイム更新機能**\n   - プロセス状態の自動更新\n   - 新規プロセスの追加表示\n   - プロセス終了時の自動削除\n   - ログのリアルタイムストリーミング\n\n3. **UIの改善**\n   - 更新時のアニメーション効果\n   - 接続状態の表示\n   - オフライン時の適切な処理\n   - 更新通知の表示\n\n4. **パフォーマンス最適化**\n   - 差分更新の実装\n   - メッセージのバッチング\n   - 不要な再描画の防止\n\n## 期待される効果\n- リアルタイムでのプロセス監視\n- サーバー負荷の削減（ポーリング削減）\n- ユーザー体験の向上\n- 迅速な問題発見と対応\n\n## 参考資料\n- 既存のWebSocketサーバー実装: dashboard/server/websocket.js\n- TODOコメント: dashboard/client/js/app.js\n- 関連Issue: #63（ログ検索機能）\n\n## タスクの規模\n中規模（4-5時間程度の実装）\n\n#task:dogfooding",
      "createdAt": "2025-06-18T03:18:28Z",
      "labels": [
        {
          "id": "LA_kwDOO7m6fc8AAAACC24Eyw",
          "name": "enhancement",
          "description": "New feature or request",
          "color": "a2eeef"
        },
        {
          "id": "LA_kwDOO7m6fc8AAAACC8UZPg",
          "name": "task:dogfooding",
          "description": "PoppoBuilder自己改善タスク（CLAUDE.md参照・更新必須）",
          "color": "ff6b35"
        }
      ],
      "number": 91,
      "title": "WebSocketによるダッシュボードのリアルタイム更新機能の完全実装",
      "updatedAt": "2025-06-19T12:19:38Z"
    },
    "issueNumber": 91,
    "labels": [
      "enhancement",
      "task:dogfooding"
    ],
    "id": "task-1750340815065-tym6s1xax",
    "priority": 100,
    "enqueuedAt": 1750340815065,
    "attempts": 0
  },
  {
    "type": "issue",
    "issue": {
      "author": {
        "id": "MDQ6VXNlcjE1NjY0OTk1",
        "is_bot": false,
        "login": "medamap",
        "name": "Medamap"
      },
      "body": "## 概要\nPoppoBuilderとGitHub Projectsを統合し、Issueの状態とプロジェクトボードを自動的に同期する機能を実装します。\n\n## 背景\nトレーサビリティ機能のPhase 3として設計されていますが、まだ実装されていません。GitHub Projectsとの統合により、プロジェクト管理の効率化が期待できます。\n\n## 実装内容\n1. **GitHub Projects API統合**\n   - プロジェクトボードの読み取り・更新\n   - カードの作成・移動・削除\n   - カラムの管理\n   - マイルストーンとの連携\n\n2. **自動同期機能**\n   - Issueステータスとプロジェクトカラムの同期\n   - PoppoBuilder処理状態の反映\n   - 進捗の可視化\n   - 完了時の自動移動\n\n3. **プロジェクト管理機能**\n   - 複数プロジェクトのサポート\n   - プロジェクトごとの設定\n   - カスタムワークフローの定義\n   - 自動化ルールの設定\n\n4. **レポート機能**\n   - プロジェクト進捗レポート\n   - バーンダウンチャート\n   - 速度メトリクス\n   - ボトルネックの可視化\n\n## 期待される効果\n- プロジェクト管理の自動化\n- 進捗の可視化\n- チーム間のコミュニケーション改善\n- 作業効率の向上\n\n## 参考資料\n- トレーサビリティ機能Phase 3の設計\n- GitHub Projects API ドキュメント\n- 関連Issue: #42, #47, #52, #57（過去の未実装Issue）\n\n## タスクの規模\n大規模（6-8時間程度の実装）\n\n#task:dogfooding",
      "createdAt": "2025-06-18T03:18:49Z",
      "labels": [
        {
          "id": "LA_kwDOO7m6fc8AAAACC24Eyw",
          "name": "enhancement",
          "description": "New feature or request",
          "color": "a2eeef"
        },
        {
          "id": "LA_kwDOO7m6fc8AAAACC8UZPg",
          "name": "task:dogfooding",
          "description": "PoppoBuilder自己改善タスク（CLAUDE.md参照・更新必須）",
          "color": "ff6b35"
        }
      ],
      "number": 92,
      "title": "GitHubプロジェクトとの統合機能の実装",
      "updatedAt": "2025-06-19T12:18:50Z"
    },
    "issueNumber": 92,
    "labels": [
      "enhancement",
      "task:dogfooding"
    ],
    "id": "task-1750340815065-28ncunabc",
    "priority": 100,
    "enqueuedAt": 1750340815065,
    "attempts": 0
  },
  {
    "type": "issue",
    "issue": {
      "author": {
        "id": "MDQ6VXNlcjE1NjY0OTk1",
        "is_bot": false,
        "login": "medamap",
        "name": "Medamap"
      },
      "body": "## 概要\nPoppoBuilderが1回のポーリング（5分ごと）で新規に処理を開始するIssueを1つまでに制限する機能を実装します。\n\n## 背景\n現在の実装では、最大同時実行数（maxConcurrent: 2）の空きがあれば、1回のポーリングで複数の新規Issueを同時に開始してしまいます。これにより：\n\n- 非同期処理のタイミング問題で、同じIssueに対して複数のプロセスが起動する可能性\n- processingラベルの付与が競合する可能性\n- デバッグが困難になる\n\n## 目的\n- 非同期処理の複雑さを回避\n- 同一Issueへの重複処理を防止\n- システムの安定性向上\n\n## 実装方針\n\n### processQueuedTasks()の修正\n```javascript\nasync function processQueuedTasks() {\n  let newIssuesStarted = 0; // 新規Issue開始数をカウント\n  \n  while (taskQueue.canExecute() && taskQueue.getQueueSize() > 0) {\n    const task = taskQueue.dequeue();\n    if (\\!task) break;\n    \n    // 新規Issueの場合、1回のポーリングで1つまで\n    if (task.type === 'issue' && newIssuesStarted >= 1) {\n      taskQueue.enqueue(task); // キューに戻す\n      console.log('📋 新規Issue処理は1回のポーリングで1つまでに制限');\n      break;\n    }\n    \n    // レート制限チェック（既存）\n    const rateLimitStatus = await rateLimiter.isRateLimited();\n    if (rateLimitStatus.limited) {\n      taskQueue.enqueue(task);\n      console.log(`⏸️  レート制限中: ${rateLimitStatus.api} API`);\n      break;\n    }\n    \n    // タスク実行開始\n    taskQueue.startTask(task.id, { type: task.type, issueNumber: task.issueNumber });\n    \n    try {\n      if (task.type === 'issue') {\n        newIssuesStarted++; // カウントアップ\n        processIssue(task.issue).then(() => {\n          // 既存の処理\n        }).catch((error) => {\n          // 既存のエラー処理\n        });\n      } else if (task.type === 'comment') {\n        // コメント処理は制限しない（既存の処理）\n      }\n    } catch (error) {\n      console.error(`タスク処理エラー:`, error.message);\n      taskQueue.completeTask(task.id, false);\n    }\n  }\n}\n```\n\n## 影響範囲\n- 新規Issue処理の開始速度が遅くなる（5分に最大2つ → 5分に1つ）\n- コメント処理には影響しない\n- 既に実行中のタスクには影響しない\n\n## テスト方法\n1. 複数の新規Issueがある状態でPoppoBuilderを起動\n2. 1回目のポーリングで1つのIssueのみが処理開始されることを確認\n3. 5分後の2回目のポーリングで次のIssueが処理開始されることを確認\n4. コメント処理は制限されないことを確認\n\n## 期待される効果\n- 同一Issueへの重複処理の完全な排除\n- システムの安定性向上\n- デバッグの容易化\n\n## 注意事項\n- この制限により、大量の新規Issueがある場合の処理速度は低下します\n- ただし、安定性と確実性を優先する設計判断です",
      "createdAt": "2025-06-18T14:04:41Z",
      "labels": [
        {
          "id": "LA_kwDOO7m6fc8AAAACC42cow",
          "name": "task:feature",
          "description": "要求定義から始まる機能開発",
          "color": "1d76db"
        },
        {
          "id": "LA_kwDOO7m6fc8AAAACC8UZPg",
          "name": "task:dogfooding",
          "description": "PoppoBuilder自己改善タスク（CLAUDE.md参照・更新必須）",
          "color": "ff6b35"
        }
      ],
      "number": 94,
      "title": "1回のポーリングで新規Issue処理を1つに制限する機能の実装",
      "updatedAt": "2025-06-19T12:18:15Z"
    },
    "issueNumber": 94,
    "labels": [
      "task:feature",
      "task:dogfooding"
    ],
    "id": "task-1750340815065-kdvqzs5z2",
    "priority": 100,
    "enqueuedAt": 1750340815065,
    "attempts": 0
  },
  {
    "type": "issue",
    "issue": {
      "author": {
        "id": "MDQ6VXNlcjE1NjY0OTk1",
        "is_bot": false,
        "login": "medamap",
        "name": "Medamap"
      },
      "body": "## 概要\nMirinOrphanManagerを「Redis大使」に昇格し、すべての状態管理をRedis経由で行う新しいアーキテクチャの第1段階として、Redis環境構築とミリンちゃんの基盤機能を実装します。\n\n## 背景\n現在のFileStateManagerによるJSONファイルベースの状態管理では、以下の問題が発生しています：\n- ファイルI/Oのボトルネック（10-50ms → 0.1-1ms への改善期待）\n- ロック機構による並行処理の制限\n- 孤児Issue問題の根本的解決が困難\n\n## Phase 1の実装内容\n\n### 1.1 Redis環境構築\n```bash\n# Redis導入と設定\nbrew install redis\nbrew services start redis\n\n# package.json に依存関係追加\nnpm install ioredis\n```\n\n### 1.2 MirinRedisAmbassador実装\n**ファイル**: `src/mirin-redis-ambassador.js`\n\n主要機能：\n- Issue状態のチェックアウト（Redis + GitHub連携）\n- 孤児Issue検出・修復の強化\n- プロセス間通信（Pub/Sub）\n- ハートビート監視とプロセス生存確認\n\n### 1.3 RedisStateClient実装\n**ファイル**: `src/redis-state-client.js`\n\n主要機能：\n- ミリンちゃんへの状態管理依頼\n- 応答待機機能（タイムアウト付き）\n- 定期的なハートビート送信\n- エラーハンドリングとフォールバック\n\n## Redis データ構造設計\n\n### Issue状態管理\n```redis\n# issue:123 (Hash)\nHSET issue:123 status processing\nHSET issue:123 processId issue-123-poppo\nHSET issue:123 pid 12345\nHSET issue:123 taskType dogfooding\nHSET issue:123 startTime 2025-06-19T10:00:00Z\n```\n\n### ハートビート管理\n```redis\n# heartbeat:issue-123-poppo (String with TTL)\nSETEX heartbeat:issue-123-poppo 1800 \"alive\"\n```\n\n### 処理中Issue一覧\n```redis\n# processing_issues (Set)\nSADD processing_issues 123 456 789\n```\n\n## テスト計画\n- ユニットテスト: MirinRedisAmbassador, RedisStateClient\n- 統合テスト: プロセス間通信、Issue状態管理\n- パフォーマンステスト: Redis vs JSONファイル性能比較\n\n## 成功条件\n- [ ] Redis環境が正常に動作する\n- [ ] MirinRedisAmbassadorがIssue状態を管理できる\n- [ ] RedisStateClientが依頼/応答できる\n- [ ] 孤児Issue検出・修復が動作する\n- [ ] パフォーマンスが10倍以上向上する\n- [ ] すべてのテストが合格する\n\n## 期待される効果\n- **パフォーマンス**: ファイルI/O → インメモリ操作で10-50倍高速化\n- **信頼性**: アトミック操作による整合性保証\n- **拡張性**: 将来の「ぽっぽ学園」マルチプロジェクト対応\n\n## 詳細設計書\n`docs/design/mirin-redis-ambassador-requirements.md` を参照してください。\n\n## 注意事項\n実装については深く深く深く仕様を検討し、バグが発生しないよう慎重に実装してください。特に：\n- Redis接続エラー時の処理\n- プロセス間通信の信頼性\n- データの整合性保証\n- 段階的移行による既存機能の保持",
      "createdAt": "2025-06-18T23:50:10Z",
      "labels": [
        {
          "id": "LA_kwDOO7m6fc8AAAACC42cow",
          "name": "task:feature",
          "description": "要求定義から始まる機能開発",
          "color": "1d76db"
        }
      ],
      "number": 102,
      "title": "【Phase 1】ミリンちゃんRedis大使昇格 - Redis環境構築とミリンちゃん基盤実装",
      "updatedAt": "2025-06-19T08:49:29Z"
    },
    "issueNumber": 102,
    "labels": [
      "task:feature"
    ],
    "id": "task-1750323843919-48j5co6ai",
    "priority": 50,
    "enqueuedAt": 1750323843919,
    "attempts": 0
  }
]