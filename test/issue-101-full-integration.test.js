#!/usr/bin/env node

/**
 * Issue #101 ÂÆåÂÖ®Áµ±Âêà„ÉÜ„Çπ„Éà
 * minimal-poppo.js„Å®minimal-poppo-cron.js„ÅÆÁµ±Âêà„Çí„ÉÜ„Çπ„Éà
 */

const assert = require('assert');
const fs = require('fs').promises;
const path = require('path');
const { spawn } = require('child_process');

// „ÉÜ„Çπ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™
const testDir = path.join(__dirname, 'test-issue-101-full');

/**
 * „Éó„É≠„Çª„Çπ„ÇíËµ∑Âãï„Åó„Å¶„É≠„Ç∞„ÇíÁõ£Ë¶ñ
 */
function spawnProcess(command, args = []) {
  const proc = spawn('node', [command, ...args], {
    cwd: path.dirname(__dirname),
    env: {
      ...process.env,
      NODE_ENV: 'test',
      GITHUB_TOKEN: 'test-token'
    }
  });
  
  const logs = [];
  
  proc.stdout.on('data', (data) => {
    const text = data.toString();
    logs.push(text);
    console.log(`[${path.basename(command)}] ${text.trim()}`);
  });
  
  proc.stderr.on('data', (data) => {
    const text = data.toString();
    logs.push(`ERROR: ${text}`);
    console.error(`[${path.basename(command)} ERROR] ${text.trim()}`);
  });
  
  return { proc, logs };
}

/**
 * „É≠„Ç∞ÂÜÖ„ÅÆ„Éë„Çø„Éº„É≥„ÇíÂæÖ„Å§
 */
async function waitForPattern(logs, pattern, timeout = 10000) {
  const startTime = Date.now();
  
  while (Date.now() - startTime < timeout) {
    const allLogs = logs.join('\n');
    if (pattern.test(allLogs)) {
      return true;
    }
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  throw new Error(`„Éë„Çø„Éº„É≥ "${pattern}" „Åå„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÂÜÖ„Å´Ë¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü`);
}

/**
 * „É™„ÇØ„Ç®„Çπ„Éà„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®„ÇíÁ¢∫Ë™ç
 */
async function checkRequestFiles() {
  const requestDir = 'state/requests';
  try {
    const files = await fs.readdir(requestDir);
    return files.filter(f => f.startsWith('label-update-') && f.endsWith('.json'));
  } catch {
    return [];
  }
}

/**
 * Áµ±Âêà„ÉÜ„Çπ„ÉàÂÆüË°å
 */
async function runTest() {
  console.log('=== Issue #101 ÂÆåÂÖ®Áµ±Âêà„ÉÜ„Çπ„ÉàÈñãÂßã ===\n');
  
  // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  try {
    await fs.rm('state', { recursive: true, force: true });
    await fs.rm('.poppo/locks', { recursive: true, force: true });
  } catch {}
  
  let minimalPoppo = null;
  let mirinLogs = [];
  
  try {
    console.log('1. minimal-poppo.jsËµ∑Âãï„ÉÜ„Çπ„Éà');
    
    // minimal-poppo.js„ÇíËµ∑Âãï
    const { proc, logs } = spawnProcess('src/minimal-poppo.js');
    minimalPoppo = proc;
    
    // ÂàùÊúüÂåñ„ÇíÂæÖ„Å§
    await waitForPattern(logs, /StatusManager„Å®MirinOrphanManager„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü/);
    console.log('‚úÖ StatusManager„Å®MirinOrphanManager„ÅåÂàùÊúüÂåñ„Åï„Çå„Åæ„Åó„Åü');
    
    await waitForPattern(logs, /MirinOrphanManager„ÅÆÁõ£Ë¶ñ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü/);
    console.log('‚úÖ MirinOrphanManager„ÅåÈñãÂßã„Åï„Çå„Åæ„Åó„Åü');
    
    // „É©„Éô„É´Êõ¥Êñ∞„É™„ÇØ„Ç®„Çπ„Éà„ÅÆÂá¶ÁêÜ„ÇíÁõ£Ë¶ñ
    setTimeout(() => {
      mirinLogs = logs.filter(log => 
        log.includes('„É©„Éô„É´Êõ¥Êñ∞„É™„ÇØ„Ç®„Çπ„Éà') || 
        log.includes('Label update request')
      );
    }, 3000);
    
    console.log('\n2. Áä∂ÊÖã„Éï„Ç°„Ç§„É´„ÅÆÁ¢∫Ë™ç');
    
    // Áä∂ÊÖã„Éï„Ç°„Ç§„É´„Åå‰ΩúÊàê„Åï„Çå„Åü„ÅãÁ¢∫Ë™ç
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    try {
      const stateFile = await fs.readFile('state/issue-status.json', 'utf8');
      const state = JSON.parse(stateFile);
      console.log('‚úÖ Áä∂ÊÖã„Éï„Ç°„Ç§„É´„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü:', state);
    } catch (error) {
      console.error('‚ùå Áä∂ÊÖã„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error.message);
    }
    
    console.log('\n3. „É™„ÇØ„Ç®„Çπ„ÉàÂá¶ÁêÜ„ÅÆÁ¢∫Ë™ç');
    
    // „É™„ÇØ„Ç®„Çπ„Éà„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç
    const requestFiles = await checkRequestFiles();
    console.log(`üìÅ „É™„ÇØ„Ç®„Çπ„Éà„Éï„Ç°„Ç§„É´Êï∞: ${requestFiles.length}`);
    
    if (requestFiles.length > 0) {
      console.log('„É™„ÇØ„Ç®„Çπ„Éà„Éï„Ç°„Ç§„É´:', requestFiles);
      
      // ÊúÄÂàù„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç
      const firstRequest = await fs.readFile(
        path.join('state/requests', requestFiles[0]), 
        'utf8'
      );
      console.log('„É™„ÇØ„Ç®„Çπ„ÉàÂÜÖÂÆπ:', JSON.parse(firstRequest));
    }
    
    // MirinOrphanManager„ÅÆ„É≠„Ç∞„ÇíÁ¢∫Ë™ç
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    if (mirinLogs.length > 0) {
      console.log('\n‚úÖ MirinOrphanManager„Åå„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂá¶ÁêÜ„Åó„Åæ„Åó„Åü:');
      mirinLogs.forEach(log => console.log(`  - ${log.trim()}`));
    } else {
      console.log('\n‚ö†Ô∏è  MirinOrphanManager„ÅÆ„É™„ÇØ„Ç®„Çπ„ÉàÂá¶ÁêÜ„É≠„Ç∞„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    }
    
    console.log('\n=== „ÉÜ„Çπ„ÉàÂÆå‰∫Ü ===');
    
  } catch (error) {
    console.error('\n‚ùå „ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error);
    throw error;
  } finally {
    // „Éó„É≠„Çª„Çπ„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    if (minimalPoppo) {
      minimalPoppo.kill('SIGINT');
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
}

// ÂÆüË°å
if (require.main === module) {
  runTest().catch(error => {
    console.error(error);
    process.exit(1);
  });
}