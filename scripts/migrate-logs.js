#!/usr/bin/env node

/**
 * „É≠„Ç∞„Éï„Ç°„Ç§„É´„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„Çπ„ÇØ„É™„Éó„Éà
 * „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™ÂÜÖ„ÅÆ„É≠„Ç∞„ÇíÂ§ñÈÉ®„Çπ„Éà„É¨„Éº„Ç∏„Å´ÁßªÂãï
 */

const fs = require('fs').promises;
const path = require('path');
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);

const globalConfig = require('../src/core/global-config');
const storagePaths = require('../src/core/storage-paths');

// „Ç´„É©„ÉºÂá∫Âäõ
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

class LogMigrator {
  constructor() {
    this.projectRoot = path.resolve(__dirname, '..');
    this.stats = {
      filesMoved: 0,
      directoriesMoved: 0,
      bytesMovMd: 0,
      errors: []
    };
  }

  async initialize() {
    // „Ç∞„É≠„Éº„Éê„É´Ë®≠ÂÆö„ÅÆÂàùÊúüÂåñ
    await globalConfig.initialize();
    
    // „Çπ„Éà„É¨„Éº„Ç∏„Éë„Çπ„ÅÆÂàùÊúüÂåñ
    storagePaths.initialize(globalConfig.config, this.projectRoot);
    
    log('üìÅ „É≠„Ç∞„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö:', 'blue');
    log(`   „Éó„É≠„Ç∏„Çß„ÇØ„Éà: ${storagePaths.projectName}`);
    log(`   ÁßªË°åÂÖÉ: ${this.projectRoot}/logs`);
    log(`   ÁßªË°åÂÖà: ${storagePaths.getLogsDir()}`);
    log('');
  }

  async findLogFiles() {
    const logSources = [];
    
    // „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„ÅÆlogs„Éá„Ç£„É¨„ÇØ„Éà„É™
    const projectLogsDir = path.join(this.projectRoot, 'logs');
    if (await this.exists(projectLogsDir)) {
      logSources.push({
        source: projectLogsDir,
        target: storagePaths.getLogsDir('app'),
        type: 'directory'
      });
    }
    
    // „É´„Éº„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ*.log„Éï„Ç°„Ç§„É´
    const rootFiles = await fs.readdir(this.projectRoot);
    for (const file of rootFiles) {
      if (file.endsWith('.log')) {
        const filePath = path.join(this.projectRoot, file);
        const stat = await fs.stat(filePath);
        if (stat.isFile()) {
          logSources.push({
            source: filePath,
            target: path.join(storagePaths.getLogsDir('app'), file),
            type: 'file'
          });
        }
      }
    }
    
    // „Ç®„Éº„Ç∏„Çß„É≥„Éà„É≠„Ç∞
    const agentsDir = path.join(this.projectRoot, 'agents');
    if (await this.exists(agentsDir)) {
      const agents = await fs.readdir(agentsDir);
      for (const agent of agents) {
        const agentLogsDir = path.join(agentsDir, agent, 'logs');
        if (await this.exists(agentLogsDir)) {
          logSources.push({
            source: agentLogsDir,
            target: storagePaths.getAgentLogPath(agent, '').replace(/\/$/, ''),
            type: 'directory'
          });
        }
      }
    }
    
    return logSources;
  }

  async exists(path) {
    try {
      await fs.access(path);
      return true;
    } catch {
      return false;
    }
  }

  async getSize(path) {
    try {
      const stat = await fs.stat(path);
      if (stat.isDirectory()) {
        const { stdout } = await exec(`du -sb "${path}" | cut -f1`);
        return parseInt(stdout.trim());
      }
      return stat.size;
    } catch {
      return 0;
    }
  }

  formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  async migrateItem(item) {
    try {
      const size = await this.getSize(item.source);
      
      // „Çø„Éº„Ç≤„ÉÉ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê
      const targetDir = item.type === 'file' ? path.dirname(item.target) : item.target;
      await fs.mkdir(targetDir, { recursive: true });
      
      // ÁßªÂãïÂÆüË°å
      if (item.type === 'file') {
        await fs.rename(item.source, item.target);
        this.stats.filesMoved++;
      } else {
        // „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂ†¥Âêà„ÅØcp„Ç≥„Éû„É≥„Éâ„Åß„Ç≥„Éî„ÉºÂæåÂâäÈô§
        await exec(`cp -r "${item.source}"/* "${item.target}"/`);
        await fs.rm(item.source, { recursive: true, force: true });
        this.stats.directoriesMoved++;
      }
      
      this.stats.bytesMovMd += size;
      
      const relativePath = path.relative(this.projectRoot, item.source);
      log(`  ‚úì ${relativePath} ‚Üí ${path.relative(this.projectRoot, item.target)} (${this.formatBytes(size)})`, 'green');
    } catch (error) {
      this.stats.errors.push(`${item.source}: ${error.message}`);
      log(`  ‚úó ${path.relative(this.projectRoot, item.source)}: ${error.message}`, 'red');
    }
  }

  async createSymlink() {
    const projectLogsDir = path.join(this.projectRoot, 'logs');
    const targetLogsDir = storagePaths.getLogsDir();
    
    try {
      // Êó¢Â≠ò„ÅÆlogs„Éá„Ç£„É¨„ÇØ„Éà„É™„Åæ„Åü„ÅØ„Ç∑„É≥„Éú„É™„ÉÉ„ÇØ„É™„É≥„ÇØ„ÇíÂâäÈô§
      if (await this.exists(projectLogsDir)) {
        const stat = await fs.lstat(projectLogsDir);
        if (stat.isSymbolicLink()) {
          await fs.unlink(projectLogsDir);
        } else if (stat.isDirectory()) {
          const files = await fs.readdir(projectLogsDir);
          if (files.length === 0) {
            await fs.rmdir(projectLogsDir);
          } else {
            log(`  ‚ö†Ô∏è  ${projectLogsDir} is not empty, skipping symlink creation`, 'yellow');
            return;
          }
        }
      }
      
      // „Ç∑„É≥„Éú„É™„ÉÉ„ÇØ„É™„É≥„ÇØ‰ΩúÊàê
      await fs.symlink(targetLogsDir, projectLogsDir, 'dir');
      log(`  ‚úì „Ç∑„É≥„Éú„É™„ÉÉ„ÇØ„É™„É≥„ÇØ‰ΩúÊàê: logs ‚Üí ${targetLogsDir}`, 'green');
    } catch (error) {
      log(`  ‚úó „Ç∑„É≥„Éú„É™„ÉÉ„ÇØ„É™„É≥„ÇØ‰ΩúÊàêÂ§±Êïó: ${error.message}`, 'red');
    }
  }

  async run() {
    try {
      await this.initialize();
      
      // „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂØæË±°„ÅÆÊ§úÁ¥¢
      const items = await this.findLogFiles();
      
      if (items.length === 0) {
        log('‚ú® „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂØæË±°„ÅÆ„É≠„Ç∞„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'green');
        return;
      }
      
      log(`\nüìä „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂØæË±°:`, 'yellow');
      for (const item of items) {
        const size = await this.getSize(item.source);
        log(`   ${path.relative(this.projectRoot, item.source)} (${this.formatBytes(size)})`);
      }
      
      const totalSize = await items.reduce(async (sum, item) => {
        return (await sum) + (await this.getSize(item.source));
      }, Promise.resolve(0));
      
      log(`\n   ÂêàË®à: ${items.length} È†ÖÁõÆ, ${this.formatBytes(totalSize)}`, 'yellow');
      
      // Á¢∫Ë™ç
      const readline = require('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      
      const answer = await new Promise(resolve => {
        rl.question('\n„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÇíÂÆüË°å„Åó„Åæ„Åô„ÅãÔºü (y/N): ', resolve);
      });
      rl.close();
      
      if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
        log('„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü', 'yellow');
        return;
      }
      
      // „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆüË°å
      log('\nüöÄ „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÈñãÂßã...', 'blue');
      for (const item of items) {
        await this.migrateItem(item);
      }
      
      // „Ç∑„É≥„Éú„É™„ÉÉ„ÇØ„É™„É≥„ÇØ‰ΩúÊàê
      log('\nüîó „Ç∑„É≥„Éú„É™„ÉÉ„ÇØ„É™„É≥„ÇØ‰ΩúÊàê...', 'blue');
      await this.createSymlink();
      
      // ÁµêÊûúË°®Á§∫
      log('\n‚úÖ „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü!', 'green');
      log(`   „Éï„Ç°„Ç§„É´: ${this.stats.filesMoved} ÂÄã`);
      log(`   „Éá„Ç£„É¨„ÇØ„Éà„É™: ${this.stats.directoriesMoved} ÂÄã`);
      log(`   ÁßªÂãï„Çµ„Ç§„Ç∫: ${this.formatBytes(this.stats.bytesMovMd)}`);
      
      if (this.stats.errors.length > 0) {
        log(`\n‚ö†Ô∏è  „Ç®„É©„Éº: ${this.stats.errors.length} ‰ª∂`, 'red');
        this.stats.errors.forEach(err => log(`   - ${err}`, 'red'));
      }
      
    } catch (error) {
      log(`\n‚ùå „Ç®„É©„Éº: ${error.message}`, 'red');
      process.exit(1);
    }
  }
}

// ÂÆüË°å
if (require.main === module) {
  const migrator = new LogMigrator();
  migrator.run();
}

module.exports = LogMigrator;